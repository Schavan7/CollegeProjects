runif(10, 3, 6)
runnorm(10)
rnorm(10)
?seq
seq()
seq(3,5)
paste(1:3)
class(paste(1:3))
paste("xyz", 1:10)
rep(c(3,4,5), 5)
x= 1:20
x
which(x==10)
x[10]
myobject=1:10
myobject=1:10;myobject
x= sum(myobject)
x= sum(myobject);x
y= paste("R is great", c(4,7,45),"and I love it");y
x= rep(1:3, length=31);x
x[7]
myfirstfn= function(x){x=x};myfirstfn(10)
myfirstfn(10)
myfirstfn= function(x){x+x};myfirstfn(10)
for(i in 1:15){print(i)};
for(z in 1:15){print(z)}
?airmiles
head(airmiles)
tail(airmiles)
tail(airmiles)
summary(mtcars)
plot(mtcars)
hist(airmiles)
head(mtcars)
sum(mycars$wt)
sum(mtcars$wt)
mtcars(2,6)
mtcars[2,6]
mtcars[c(2,5,6),6]
plot(airmiles)
hist(airlmiles)
hist(airmiles)
number= scan()
numbers = scan()
numbers = scan()
View(myfirstfn)
View(myfirstfn)
function(x){x+x}
numbers= scan()
plot(lynx)
plot(lynx, main="Lynx Trappings", col="red",
col.main= 52, cex.main=1.5)
?rivers
x= 1:141
y = rivers
plot(x,y, col= "green", pch =20, main="Lengths of Major N. American rivers",
col.main="red", xlab ="", ylab="Lengths in miles")
plot(x,y, col= "green", pch =13, main="Lengths of Major N. American rivers",
col.main="red", xlab ="", ylab="Lengths in miles")
plot(x,y, col= "green", pch =11, main="Lengths of Major N. American rivers",
col.main="red", xlab ="", ylab="Lengths in miles")
plot(x,y, col= "green", pch =20, main="Lengths of Major N. American rivers",
col.main="red", xlab ="", ylab="Lengths in miles")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?diamonds
head(diamonds)
attach(diamonds)
depthsmall = sample(depth,5000);
x = 10.5
x = 10.5
x
class(x)
mtcars
mtcars[1, 2]
mtcars[1, ]
mtcars[, 2]
mtcars$disp
mtcars[c(3,24),]
d = c(1, 2,3,4)
e = c("red", "white","red",NA)
f = c(TRUE,TRUE,TRUE, FALSE)
mydata = data.frame(d,e,f)
mydata
names(mydata)= c("ID","Color","passed")
mydata
mydata$Color
set.seed(10)
set.seed(50)
schtyp = sample(1:25, 20, replace = TRUE)
schtyp
schtyp
schtyp = sample(1:25, 20, replace = FALSE)
schtyp
schtyp
schtyp
schtyp.f = factor(schtyp, labels = c("private", "public"))
str(mtcars)
summary(mtcars)
mtcars$mpg
mtcars
mtcars$mpg[8]
mtcars[8]
mtcars[8,]
mtcars["Merc 240D", ]
mtcars[which.max(mtcars$mpg),]
set.seed(50)
attach(mtcars)
mtcars
mtcars[c(3,24), ]
source('~/Desktop/R/Online learning/test.R')
source('~/Desktop/R/Online learning/test.R')
source('~/Desktop/R/Online learning/test.R')
library(readr)
library(tseries)
library(stats)
library(lmtest)
library(ast)
library(astsa)
library(xts)
library(zoo)
setwd("~/Desktop/ITM FALL 2017/Data Analsis_527/Assignment02")
library(readr)
library(tseries)
library(stats)
library(lmtest)
library(ast)
library(astsa)
library(xts)
library(zoo)
TimeSeries <-  read.csv("Mydata.csv",header= TRUE,sep =",")
TimeSeries <- as.xts(TimeSeries)
TimeSeries <-  read.csv("Mydata.csv",header= TRUE,sep =",")
head(TimeSeries)
plot.ts(TimeSeries)
plot(TimeSeries)
plot.ts(TimeSeries)
str(TimeSeries)
class(TimeSeries)
summary(TimeSeries)
plot.ts(TimeSeries)
TimeSeries$ID = NULL
TimeSeries
TimeSeries <-  read.csv("Mydata.csv",header= TRUE,sep =",")
head(TimeSeries)
plot(TimeSeries)
TimeSeries <- as.xts(TimeSeries)
TimeSeries <-  read.csv("Mydata.csv",header= TRUE,sep =",")
head(TimeSeries)
plot(TimeSeries)
plot.ts(TimeSeries)
str(TimeSeries)
class(TimeSeries)
summary(TimeSeries)
plot.ts(TimeSeries)
TimeSeries
TimeSeriesData = ts(TimeSeries$Temp, frequency = 12,start = c(1946,1), end= c(1959,12))
TimeSeriesData
str(TimeSeriesData)
summary(TimeSeriesData)
TimeSeriesData
str(TimeSeriesData)
summary(TimeSeriesData)
plot.ts(TimeSeries)
str(TimeSeries)
class(TimeSeries)
summary(TimeSeries)
plot.ts(TimeSeries)
plot(TimeSeriesData)
class(TimeSeriesData)
start(TimeSeriesData)
end(TimeSeriesData)
frequency(TimeSeriesData)
plot(TimeSeriesData)
summary(TimeSeriesData)
str(TimeSeriesData)
abline(reg=lm(TimeSeriesData~time(TimeSeriesData)))
boxplot(TimeSeriesData~cycle(TimeSeriesData))
TimeSeriesComponents <- decompose(birthstimeseries)
plot(TimeSeriesComponents)
class(TimeSeriesData)
start(TimeSeriesData)
end(TimeSeriesData)
frequency(TimeSeriesData)
plot(TimeSeriesData)
abline(reg=lm(TimeSeriesData~time(TimeSeriesData)))
boxplot(TimeSeriesData~cycle(TimeSeriesData))
TimeSeriesComponents <- decompose(birthstimeseries)
TimeSeriesComponents <- decompose(TimeSeriesData)
plot(TimeSeriesComponents)
TimeSeries <-  read.csv("Mydata.csv",header= TRUE,sep =",")
head(TimeSeries)
plot(TimeSeries)
TimeSeriesData = ts(TimeSeries$Temp, frequency = 12,start = c(1946,1), end= c(1959,12))
summary(TimeSeriesData)
str(TimeSeriesData)
plot(TimeSeriesData)
class(TimeSeriesData)
start(TimeSeriesData)
end(TimeSeriesData)
frequency(TimeSeriesData)
plot(TimeSeriesData)
abline(reg=lm(TimeSeriesData~time(TimeSeriesData)))
boxplot(TimeSeriesData~cycle(TimeSeriesData))
TimeSeriesComponents <- decompose(TimeSeriesData)
plot(TimeSeriesComponents)
boxplot(TimeSeriesData~cycle(TimeSeriesData))
plot(log(TimeSeriesData))
plot(diff(log(TimeSeriesData)))
plot(log(TimeSeriesData))
plot(log(TimeSeriesData))
plot(log(TimeSeriesData))
plot(diff(log(TimeSeriesData)))
plot(log(TimeSeriesData))
plot(diff(log(TimeSeriesData)))
acf(TimeSeriesData)
acf(diff(log(TimeSeriesData)))
pacf (diff(log(TimeSeriesData)))
arimaTimeSeries = arima(TimeSeriesData,c(3,0,1))
plot(arimaTimeSeries$residuals)
acf(TimeSeriesData)
arimaTimeSeries = arima(TimeSeriesData,c(1,1,2))
arimaTimeSeries = arima(diff(log(TimeSeriesData)),c(1,0,2))
plot(arimaTimeSeries$residuals)
TimeSeries <-  read.csv("Mydata.csv",header= TRUE,sep =",")
head(TimeSeries)
plot.ts(TimeSeries)
plot.ts(TimeSeries)
summary(TimeSeriesData)
str(TimeSeriesData)
plot(TimeSeriesData)
class(TimeSeriesData)
start(TimeSeriesData)
end(TimeSeriesData)
frequency(TimeSeriesData)
plot(TimeSeriesData)
abline(reg=lm(TimeSeriesData~time(TimeSeriesData)))
plot(log(TimeSeriesData))
plot(diff(log(TimeSeriesData)))
timeseries = plot(diff(log(TimeSeriesData)))
timeseries = diff(log(TimeSeriesData))
plot(timeseries)
acf(TimeSeriesData)
plot(log(TimeSeriesData))
plot(diff(log(TimeSeriesData)))
acf(diff(log(TimeSeriesData)))
pacf (diff(log(TimeSeriesData)))
acf(TimeSeriesData)
timesseries <- diff(log(TimeSeriesData))
acf(timesseries)
pacf (diff(log(timesseries)))
acf(TimeSeriesData)
timesseries <- diff(log(TimeSeriesData))
acf(timesseries)
pacf(timesseries)
acf(timesseries)
pacf(timesseries)
auto.arima(timesseries , ic= 'bic')
auto.arima(TimeSeriesData , ic= 'bic')
auto.arima(TimeSeriesData , ic= 'bic')
auto.arima(TimeSeriesData , ic= 'bic')
auto.arima(TimeSeriesData ,ic= 'bic')
library(readr)
library(tseries)
library(stats)
library(lmtest)
library(ast)
library(astsa)
library(xts)
library(zoo)
?ast
??ast
auto.arima(TimeSeriesData ,ic= 'bic')
library(readr)
library(tseries)
library(stats)
library(lmtest)
library(ast)
library(astsa)
library(xts)
library(zoo)
library(forecast)
library(quadprog)
library(quadprog)
auto.arima(TimeSeriesData ,ic= 'bic')
library(readr)
library(tseries)
library(stats)
library(lmtest)
library(ast)
library(astsa)
library(xts)
library(zoo)
library(quadprog)
auto.arima(TimeSeriesData ,ic= 'bic')
arimaTimeSeries <- arima(TimeSeriesData,c(3,0,1))
plot(arimaTimeSeries$residuals)
arimaTimeSeries <- arima((timesseries),c(1,0,2))
plot(arimaTimeSeries$residuals)
arimaTimeSeriesForecast <- forecast(arimaTimeSeries, h=20)
arimaTimeSeriesForecast
plot(arimaTimeSeriesForecast)
acf(arimaTimeSeries$residuals, lag.max = 20)
Box.test(arimaTimeSeries$residuals, type = "Ljung-Box")
fit <-  arima(log(TimeSeriesData), c(1,1,2) , seasonal = list(order = c(1,1,2), period = 12), method="CSS")
pred <- predict(fit, n.ahead = 10 * 12)
pred1 <- 2.718^pred$pred
ts.plot(TimeSeriesData, 2.718^pred$pred, log = "y", lty = c(1,3))
TestData <- ts(TimeSeries$Temp, frequency = 12,start = c(1946,1), end= c(1959,12))
fit1 <-  arima(log(TestData), c(1,1,2) , seasonal = list(order = c(1,1,2), period = 12), method="CSS")
pred <- predict(fit1, n.ahead = 10 * 12)
pred1 <- 2.718^pred$pred
data1 <- head(pred1,12)
predicted_1960 = round(data1, digits = 0)
original_1960 = tail(TimeSeriesData,12)
predicted_1960
original_1960
ts.plot(TimeSeriesData, 2.718^pred$pred, log = "y", lty = c(1,3))
TimeSeriesforecasts <- HoltWinters(TimeSeriesData, beta=FALSE, gamma=FALSE)
TimeSeriesforecasts
TimeSeriesforecasts$fitted
plot(TimeSeriesforecasts,col = "green")
TimeSeriesforecasts$SSE
HoltWinters(TimeSeriesData, beta=FALSE, gamma=FALSE, l.start=11.506)
library(forecast)
TimeSeriesforecasts2 <- forecast(TimeSeriesData, h=8)
TimeSeriesforecasts2
plot(TimeSeriesforecasts2)
acf(TimeSeriesforecasts2$residuals, lag.max = 15)
TimeSeriesforecasts2$residuals
TimeSeriesforecasts2$residuals[1] = 1
acf(TimeSeriesforecasts2$residuals, lag.max=20)
Box.test(TimeSeriesforecasts2$residuals, lag=70, type="Ljung-Box")# pvalue to be more than 0.5
Box.test(TimeSeriesforecasts2$residuals, lag=15, type="Ljung-Box")
Box.test(TimeSeriesforecasts2$residuals, lag=70, type="Ljung-Box")# pvalue to be more than 0.5
plot.ts(TimeSeriesforecasts2$residuals)
plotForecastErrors <- function(forecasterrors) {
mybinsize <- IQR(forecasterrors)/4
mysd <- sd(forecasterrors)
mymin <- min(forecasterrors) - mysd*5
mymax <- max(forecasterrors) + mysd*3 # generate normally distributed data with mean 0 and standard deviation mysd
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
mybins <- seq(mymin, mymax, mybinsize)
hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2) }
plotForecastErrors(TimeSeriesforecasts2$residuals)
Box.test(TimeSeriesforecasts2$residuals, lag=100, type="Ljung-Box")# pvalue to be more than 0.5
Box.test(TimeSeriesforecasts2$residuals, lag=70, type="Ljung-Box")# pvalue to be more than 0.5
plot.ts(TimeSeriesforecasts2$residuals)
plotForecastErrors(TimeSeriesforecasts2$residuals)
plot.ts(TimeSeriesforecasts2$residuals)
plotForecastErrors(TimeSeriesforecasts2$residuals)
library(readr)
library(tseries)
library(stats)
library(lmtest)
library(xts)
library(zoo)
library(quadprog)
TimeSeries <-  read.csv("Mydata.csv",header= TRUE,sep =",")
head(TimeSeries)
plot(TimeSeries)
auto.arima(TimeSeriesData ,ic= 'bic')
qqnorm(TimeSeriesData)
qqline(TimeSeriesData, col=2)
